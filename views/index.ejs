<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI云检测误差分析系统</title>
    <script src="/tailwindcss.js"></script>
    <link href="/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/flatpickr.min.css">
    <script src="/flatpickr.min.js"></script>
    <script src="/zh.js"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#165DFF',
                        secondary: '#0FC6C2',
                        success: '#00B42A',
                        warning: '#FF7D00',
                        danger: '#F53F3F',
                        info: '#86909C',
                        'time-tab': '#F2F3F5',
                        'time-tab-active': '#3b82f6',
                    },
                    fontFamily: {
                        inter: ['Inter', 'system-ui', 'sans-serif'],
                    },
                    boxShadow: {
                        'card': '0 2px 14px 0 rgba(0, 0, 0, 0.06)',
                    }
                },
            }
        }
    </script>
    <style type="text/tailwindcss">
        @layer utilities {
            .content-auto {
                content-visibility: auto;
            }
            .scrollbar-hide {
                -ms-overflow-style: none;
                scrollbar-width: none;
            }
            .scrollbar-hide::-webkit-scrollbar {
                display: none;
            }
            .tab-active {
                @apply bg-time-tab-active text-white border-primary;
            }
            .color-scale {
                @apply h-3 w-full bg-gradient-to-r border border-gray-300;
            }
        }
        
        .map {
            height: 35vh;
            width: 100%;
        }
        .simple-label-tooltip {
            font-size: 0.875rem;
            /* text-sm */
            color: #1f2937;
            /* text-gray-800 */
            font-weight: 700;
            /* font-bold */
            background: transparent !important;
            border: none !important;
            box-shadow: none !important;
            z-index: 999;
        }
    </style>
    <style>
        /* 自定义滚动条样式 */
        ::-webkit-scrollbar {
            width: 6px;
            height: 6px;
        }

        /* 隐藏滚动条按钮 */
        ::-webkit-scrollbar-button {
            display: none;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(59, 130, 246, 0.3);
            border-radius: 50%;
            border-top-color: #3b82f6;
            animation: spin 1s ease-in-out infinite;
            margin-right: 8px;
            vertical-align: middle;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .loading-status {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            transition: all 0.3s ease;
        }
    </style>
</head>

<body class="font-inter bg-gray-50 min-h-screen">
    <div class="max-w-12xl">
        <div class="flex">
            <!-- 左侧时间选择栏 -->
            <div class="w-48 lg:w-48 rounded-xl p-2">
                <div class="flex items-center mb-4">
                    <div class="border border-gray-300 rounded w-full flex">
                        <% for(let model of modelList) { %>
                            <button class="tab-btn w-1/2 <%= defaultModel === model ? 'active border-primary bg-blue-500 text-white shadow-sm' : 'border-primary text-gray-500 hover:bg-gray-50 hover:text-gray-700' %> px-2 py-1 text-center font-bold text-base transition-all duration-200" value=<%= model %> style="font-size: 12px;"><%= model %></button>
                        <% } %>
                    </div>
                </div>
                <div class="mb-2">
                    <h2 class="text-lg text-gray-800 flex items-center justify-around">
                        <span class="">起报时间选择</span>
                    </h2>
                    <input id="myID" placeholder="搜索时间..." class="w-full p-2 border border-gray-300 rounded-md focus:outline-none"/>
                </div>

                <div class="space-y-2 overflow-y-auto max-h-[calc(100vh-100px)] scrollbar-hide pr-1">
                    <!-- 时间标签页 - 今天 -->
                    <div class="grid max-h-[calc(30vh)] grid-cols-1 gap-2 overflow-y-auto custom-scrollbar reportList">
                        <% if (reportHourList.length> 0) { %>
                            <% reportHourList.forEach(time=> { %>
                                <button onclick="locationReload('report', this.value)"
                                    class="time-option <%= time === currentReportTime.split(' ')[1] ? 'tab-active' : '' %> report border-b-2 border-gray-200 py-2 px-3 w-full flex flex-wrap justify-around text-center items-center"
                                    value="<%= time %>" data-time="<%= time %>"
                                >
                                    <%= time %>
                                </button>
                            <% }) %>
                        <% } else { %>
                            <p class="no-data">暂无时间数据</p>
                        <% } %>
                    </div>
                </div>

                <div class="mt-4">
                    <h2 class="text-lg text-gray-800 flex items-center justify-around">
                        <span class="">预报时间</span>
                        
                    </h2>

                    <!-- 修改为单个切换按钮 -->
                    <div class="flex mt-2 mb-2 gap-2">
                        <button id="toggleBtn" class="bg-blue-500 text-white py-1 px-2 rounded flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 1408 1600"><!-- Icon from Font Awesome 4 by Dave Gandy - https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL --><path fill="currentColor" d="M1384 831L56 1569q-23 13-39.5 3T0 1536V64q0-26 16.5-36T56 31l1328 738q23 13 23 31t-23 31"/></svg>
                            播放
                        </button>
                    </div>

                    <div class="max-h-1/2 overflow-hidden shadow-card forcastList">
                        <% if (forcastHourList[currentReportTime.split(' ')[1]].length> 0) { %>
                            <% forcastHourList[currentReportTime.split(' ')[1]].forEach((forcast, index)=> { %>
                                <button
                                    onclick="locationReload('forcast', this.value)"
                                    class="<%= index === 0 ? 'tab-active' : '' %> forcast py-1 px-1 w-full flex flex-wrap justify-around  text-center items-center"
                                    value="<%= forcast %>"
                                    data-img=""
                                >
                                    <div class="w-1/2"><%= formatDate(currentReportTime.split(' ')[0] +' ' + forcast) %></div>
                                </button>
                            <% }) %>
                        <% } else { %>
                            <p class="no-data">暂无时间数据</p>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- 右侧图片区域 -->
            <div class="w-full lg:w-full h-screen relative overflow-hidden pic-container bg-white">
                <!-- 图片网格 -->
                <img id="weatherImage" class="img-content w-full h-full object-contain transition-transform duration-300 ease-in-out" src="" alt="">
            </div>
        </div>
    </div>

        <!-- 根据点击事件切换图片 -->
    <script>
        function formatDate(dateString, type) {
            const date = new Date(dateString);
            const year = date.getFullYear();
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return type ? `${year}${month}${day}${hours}${minutes}00` : `${month}-${day} ${hours}:${minutes}`;
        }
        
        function changeForcastAndReportTime(reportHour) {
            // 获取ejs变量forcastHourList
            const forcastHourList = <%- JSON.stringify(forcastHourList || []) %>;
            document.querySelector('.tab-active.report').classList.remove('tab-active');
            document.querySelector(`.report[value="${reportHour}"]`).classList.add('tab-active');
            const date = document.querySelector('#myID').value;
            console.log(date)
            const forcastListDiv = document.querySelector('.forcastList');
            forcastListDiv.innerHTML = `
                ${forcastHourList[reportHour].map((forcast, index)=> {
                    return `<button
                        onclick="locationReload('forcast', this.value)"
                        class="${index === 0 ? 'tab-active' : '' } forcast py-1 px-1 w-full flex flex-wrap justify-around  text-center items-center"
                        value="${forcast}"
                        data-img=""
                    >
                        <div class="w-1/2"> ${formatDate(date+' ' +forcast)} </div>
                    </button>`
                }).join('')}
            `
            const reportTime = date + ' ' + reportHour;
            const forcastTime = formatDate(date + ' ' + forcastHourList[reportHour][0], true);
            
            // 去掉日期中的所有符号和空格
            const reportTimeReplace = reportTime.replace(/[^\d]/g, '');
            const forcastTimeReplace = (forcastTime).replace(/[^\d]/g, '');
            buttons = document.querySelectorAll('.forcast');
            return `${reportTimeReplace}/${forcastTimeReplace}`;
        }

        function changeReportTime(reportHour, forcastHour) {
            document.querySelector('.tab-active.forcast').classList.remove('tab-active');
            document.querySelector(`.forcast[value="${forcastHour}"]`).classList.add('tab-active');
            const date = document.querySelector('#myID').value;
            const reportTime = date + ' ' + reportHour;
            const forcastTime = formatDate(date + ' ' + forcastHour, true);
            // 去掉日期中的所有符号和空格
            const reportTimeReplace = reportTime.replace(/[^\d]/g, '');
            const forcastTimeReplace = forcastTime.replace(/[^\d]/g, '');
            return `${reportTimeReplace}/${forcastTimeReplace}`;
        }

        function locationReload(type, value) {
            switch(type) {
                case 'model':
                    break;
                case 'report':
                    loadImg(changeForcastAndReportTime(value));
                    break;
                case 'forcast':
                    loadImg(changeReportTime(document.querySelector('.tab-active.report')?.value, value));
                    break;
            }
        }
    </script>




<script>
    const startDate = "<%= startDate %>"
    flatpickr("#myID", {
        locale: 'zh',
        disable: [
            function(date) {
                return new Date(date).getTime() > new Date().getTime();
            }
        ],
        defaultDate: startDate,
        onChange: (selectedDates, dateStr, instance) => {
            loadImg(changeForcastAndReportTime(document.querySelector('.tab-active.report')?.value));
        }
    });

</script>


<!-- 图片加载 -->
    <script>
    function loadImg(src) {
        // 清除可能存在的轮询定时器
        if (window.pollInterval) {
            clearInterval(window.pollInterval);
            window.pollInterval = null;
        }

        const imgContent = document.querySelector('.img-content');
        const statusElement = document.querySelector('.loading-status') || createStatusElement();

        // 显示加载状态
        statusElement.innerHTML = '<div class="spinner"></div> 正在请求图片资源...';
        statusElement.className = 'loading-status text-center py-4 text-blue-600';
        imgContent.style.display = 'none';
        imgContent.src = '';

        fetch(src)
            .then(response => {
                if (response.status === 200) {
                    // 文件存在，返回图片
                    return response.blob();
                } else {
                    // 解析错误状态信息
                    return response.json().then(data => {
                        throw new Error(data.status || '加载失败');
                    });
                }
            })
            .then(blob => {
                // 加载成功，清除轮询定时器
                if (window.pollInterval) {
                    clearInterval(window.pollInterval);
                    window.pollInterval = null;
                }

                imgContent.src = URL.createObjectURL(blob);
                imgContent.style.display = 'block';
                statusElement.style.display = 'none';
            })
            .catch(error => {
                // 显示错误状态
                if (error.message === '数据预测中') {
                    statusElement.innerHTML = '<div class="spinner"></div> 模型预测中...';
                    statusElement.className = 'loading-status text-center py-4 text-blue-600';

                    // 设置轮询，每10秒重试一次
                    window.pollInterval = setInterval(() => {
                        // 检查是否仍需要轮询（防止用户已切换时间块但定时器未清除）
                        if (document.querySelector('.loading-status') && 
                            document.querySelector('.loading-status').textContent.includes('模型预测中')) {
                            loadImg(src);
                        } else if (window.pollInterval) {
                            clearInterval(window.pollInterval);
                            window.pollInterval = null;
                        }
                    }, 50000);
                } else {
                    // 其他错误状态，清除轮询定时器
                    if (window.pollInterval) {
                        clearInterval(window.pollInterval);
                        window.pollInterval = null;
                    }

                    if (error.message === '无数据') {
                        statusElement.textContent = '暂无数据';
                        statusElement.className = 'loading-status text-center py-4 text-red-600';
                    } else {
                        statusElement.textContent = error.message;
                        statusElement.className = 'loading-status text-center py-4 text-orange-600';
                    }
                }
                statusElement.style.display = 'block';
            });
    }
    // 创建状态显示元素（如果不存在）
    function createStatusElement() {
        const statusElement = document.createElement('div');
        const imgContainer = document.querySelector('.img-content').parentNode;
        imgContainer.appendChild(statusElement);
        return statusElement;
    }
    // 页面加载完成后加载初始图片
    document.addEventListener('DOMContentLoaded', () => {
        buttons[0].click();
    });
    </script>

<script>
    let carouselInterval;
    let currentIndex = 0;
    let isPlaying = false; // 新增状态变量
    let buttons = document.querySelectorAll('.forcast');
    const toggleBtn = document.getElementById('toggleBtn');

    toggleBtn.addEventListener('click', () => {
        if (buttons.length === 0) return;

        if (isPlaying) {
            // 当前是播放状态，切换到暂停
            clearInterval(carouselInterval);
            toggleBtn.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 1408 1600"><!-- Icon from Font Awesome 4 by Dave Gandy - https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL --><path fill="currentColor" d="M1384 831L56 1569q-23 13-39.5 3T0 1536V64q0-26 16.5-36T56 31l1328 738q23 13 23 31t-23 31"/></svg>
                播放
            `;
            toggleBtn.classList.remove('bg-red-500');
            toggleBtn.classList.add('bg-blue-500');
        } else {
            // 当前是暂停状态，切换到播放
            carouselInterval = setInterval(() => {
                currentIndex = (currentIndex + 1) % buttons.length;
                buttons[currentIndex].click();
            }, 3000);
            toggleBtn.innerHTML =  `
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 1536 1536"><!-- Icon from Font Awesome 4 by Dave Gandy - https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL --><path fill="currentColor" d="M1536 64v1408q0 26-19 45t-45 19H960q-26 0-45-19t-19-45V64q0-26 19-45t45-19h512q26 0 45 19t19 45m-896 0v1408q0 26-19 45t-45 19H64q-26 0-45-19t-19-45V64q0-26 19-45T64 0h512q26 0 45 19t19 45"/></svg>
                暂停
            `;
            toggleBtn.classList.remove('bg-blue-500');
            toggleBtn.classList.add('bg-red-500');
        }
        isPlaying = !isPlaying; // 切换状态
    });
</script>

</body>

</html>